#Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: maven:3.3-jdk-8

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: /Users/i842164/infra/src/Super-Mario/YaaS-Pipelines/YCD-1109-circleCI
    general:
      artifacts:
        - "/Users/i842164/infra/src/Super-Mario/YaaS-Pipelines/YCD-1109-circleCI/target/application.jar"
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Install Dependancies
          command: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Clean
          command: |
            set -e
            mvn -B clean
      - run:
          name: Compile
          command: |
            set -e
            mvn -B compile
      - run:
          name: Unit test
          command: |
            set -e
            mvn -B test
      - run:
          name: Install
          command: |
            set -e
            mvn -B install -DskipTests
      - run:
          name: Create artifacts
          command: |
            set -e
            mv target/*.war target/application.war

      # run tests!
      - run: docker build -t spring-boot-hello-world .
      - run:
          name: Integration Test
          # creating dummy container which will hold a volume with config
          command: |
            docker create -v $PWD --name workdirfiles spring-boot-hello-world /bin/true
            docker cp target/application.war workdirfiles:$PWD
            docker run --volumes-from workdirfiles -w $PWD --name mvntest --network mvntest:workdirfiles maven:3.3-jdk-8 cmd mvn -B -Prun-external-tests -D'maven.test.skip=true' -D'external.container.host=workdirfiles' -D'external.container.port=8080' verify
      - run:
          name: Integration Test
          command: |
            set set -eo pipefail
            mvn integration-test
